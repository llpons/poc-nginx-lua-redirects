# This file is installed to:
#   `/etc/nginx/conf.d/redis.conf`

server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page  500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    index index.html;
    root /srv/websites;
    default_type text/html;
    resolver 127.0.0.11; # Docker resolver

    ## Sandbox locations

    location /hello-world {
        default_type text/html;
        content_by_lua_block {
            ngx.say("<p>hello, world</p>")
        }
    }
    location ~ /(postgres|redis)/ok {
        default_type text/plain;
        return 200 'Ok!\n';
    }

    location /redis {
        try_files $uri $uri/ index.html @redirect_redis;
    }

    location @redirect_redis {
        access_by_lua '
            local src_path = ngx.var.uri
            ngx.log(ngx.ERR, src_path)
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 second

            local ok, err = red:connect("redis", 6379)
            if not ok then
                ngx.log(ngx.ERR, "Failed to connect to redis: ", err)
                return ngx.exit(500)
            end

            local dst_path, err = red:get(src_path)
            if not dst_path or dst_path == ngx.null then
                ngx.log(ngx.ERR, "No key found", src_path)
                return ngx.exit(404)
            end
            ngx.redirect(dst_path, 301);
        ';
    }

    # Same result but with `proxy_pass` instead `try_files`

    location /postgres {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_pass http://proxied-website/;
        proxy_intercept_errors on;
        error_page 404 = @redirect_postgres;
    }

    location @redirect_postgres {
        access_by_lua '
            local pgmoon = require("pgmoon")
            local pg = pgmoon.new({
              host     = "postgres",
              port     = "5432",
              user     = "lua",
              password = "mysecret",
              database = "urldb"
            })
            local src_path = ngx.var.uri
            local sql = "SELECT * FROM redirect WHERE src_path = "
                .. pg:escape_literal(src_path)
            assert(pg:connect())
            local res = assert(pg:query(sql))
            if res[1]  == pg.null then
                ngx.log(ngx.ERR, "No src_path found", src_path)
                return ngx.exit(404)
            end
            local dst_path = res[1].dst_path
            local code = res[1].code
            ngx.redirect(dst_path, code);
        ';
    }
}
